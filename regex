#include <iostream>
#include <stdio.h>
#include <regex>
#include <map>
#include <fstream>
#include <string>

std::string getString(){

 std::string str="ed2k://|server|";
   for(int i=0;i<3;i++){
      str+=std::to_string(rand()%256)+".";}
   str+=std::to_string(rand()%256)+"|"+std::to_string(rand()%65536+1)+"|/";
   str += "\n";
   return str;
}

void generateFile(std::string fileName,int amount)
{
    std::ofstream file(fileName);
    for (int i = 0; i < amount; ++i)
      file << getString();
    file.close();
}


int main()
{
    std::regex expression("^([Ee][Dd]2[Kk]:\\/\\/\\|[Ss][Ee][Rr][Vv][Ee][Rr]\\|)(([0-9]{1,3}).([0-9]{1,3}).([0-9]{1,3}).([0-9]{1,3}))\\|([0-9]{1,5})\\|\\/$");
    std::smatch base_match;
    std::map<std::string, int> map;
    std::string str;
    bool flag = true;
    std::string fileName = "Test.txt";
    generateFile(fileName,100000);
    std::ifstream file;
    file.open(fileName);
     while (!file.eof()){

    std::getline(file,str);
    if(std::regex_match(str,base_match,expression))
    {


        for (int i = 3; i < 7; ++i)
        {
            std::string a = base_match[i];
            int oktet = atoi(a.c_str());
            if (oktet > 255 || oktet < 0)
                flag = false;
        }
        std::string a = base_match[7];

        int port = atoi(a.c_str());
        if (port > 65535 || port < 1)
            flag = false;
        if (flag == true)
        {
            int calls = 1;
            if(map.count(a) != 0)
                calls += map.find(a)->second;
            map[a] = calls;
        }
        else if (flag == false)
            std::cout << "Invalid input!\n";
    }


   }
    std::cout << "------Entered data------" << std::endl;
    for(auto i = map.begin(); i != map.end(); ++i)
            std::cout << i->first << " - " << i->second << std::endl;
    std::cout << "------------------------" << std::endl;
    return 0;
}
